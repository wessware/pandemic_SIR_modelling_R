S.k1 <- dSdt(i, Si, Ii)
I.k1 <- dIdt(i, Si, Ii)
S.k2 <- dSdt(i + dt / 2, Si + dt / 2 * S.k1, Ii + dt / 2 * I.k1)
I.k2 <- dIdt(i + dt / 2, Si + dt / 2 * S.k1, Ii + dt / 2 * I.k1)
S.k3 <- dSdt(i + dt / 2, Si + dt / 2 * S.k2, Ii + dt / 2 * I.k2)
I.k3 <- dIdt(i + dt / 2, Si + dt / 2 * S.k2, Ii + dt / 2 * I.k2)
S.k4 <- dSdt(i + dt, Si + dt * S.k3, Ii + dt * I.k3)
I.k4 <- dIdt(i + dt, Si + dt * S.k3, Ii + dt * I.k3)
S[i + 1] <- Si + dt / 6 * (S.k1 + 2 * S.k2 + 2 * S.k3 + S.k4)
I[i + 1] <- Ii + dt / 6 * (I.k1 + 2 * I.k2 + 2 * I.k3 + I.k4)
}
R <- N - S - I
if (!incidence) {
return(data.frame(n = 0:n, S = S, I = I, R = R))
} else {
# newly infected per day (incidence)
inc = c(I0, -diff(S))
# cumulative incidence
cum.inc = cumsum(inc)
return(data.frame(n = 0:n, S = S, I = I, R = R, inc = inc, cum.inc = cum.inc))
}
}
r <- RK4SIR(n, beta, gamma, S0, I0, incidence = TRUE)
# # plot S, I, R, incidence, cummulative incidence curves
r.plot <- melt(r, id = "n", measure = c("S", "I", "R", "inc", "cum.inc"))
p <- ggplot(r.plot, aes(x = n, y = value, group = variable, color = variable))
p + geom_line() +
scale_colour_discrete(name = "Legend",
breaks = c("S", "I", "R", "inc", "cum.inc"),
labels = c("Susceptible", "Infected ", "Recovered", "Incidence",
"Cummulative incidence")) +
ggtitle("Spread of Hong Kong Flu in New York City")
which.max(r$inc)
max(r$inc)
RK4SIR.Yang <- function(n, beta, gamma, S0, I0, R0 = 0, dt = 1, incidence = FALSE) {
N <<- S0 + I0 + R0
S <- c(S0, rep(0, n))
I <- c(I0, rep(0, n))
R <- c(R0, rep(0, n))
cum.inc <- rep(0, n + 1)  # cumulative incidence
for (i in 1:n) {
Si <- S[i]
Ii <- I[i]
S.k1 <- dSdt(i, Si, Ii)
I.k1 <- dIdt(i, Si, Ii)
CI.k1 <- -S.k1
Ts1 <- Si + dt / 2 * S.k1
Ti1 <- Ii + dt / 2 * I.k1
S.k2 <- dSdt(i + dt / 2, Ts1, Ti1)
I.k2 <- dIdt(i + dt / 2, Ts1, Ti1)
CI.k2 <- -S.k2
Ts2 <- Ts1 + dt / 2 * S.k2
Ti2 <- Ti1 + dt / 2 * I.k2
S.k3 <- dSdt(i + dt / 2, Ts2, Ti2)
I.k3 <- dIdt(i + dt / 2, Ts2, Ti2)
CI.k3 <- -S.k3
Ts3 <- Ts2 + dt * S.k3
Ti3 <- Ti2 + dt * I.k3
S.k4 <- dSdt(i + dt, Ts3, Ti3)
I.k4 <- dIdt(i + dt, Ts3, Ti3)
CI.k4 <- -S.k4
S[i + 1] <- Si + dt / 6 * (S.k1 + 2 * S.k2 + 2 * S.k3 + S.k4)
I[i + 1] <- Ii + dt / 6 * (I.k1 + 2 * I.k2 + 2 * I.k3 + I.k4)
R[i + 1] <- N - S[i + 1] - I[i + 1]
cum.inc[i + 1] <- cum.inc[i] + dt / 6 * (CI.k1 + 2 * CI.k2 + 2 * CI.k3 + CI.k4)
}
if (!incidence) {
return(data.frame(n = 0:n, S = S, I = I, R = R))
} else {
return(data.frame(n = 0:n, S = S, I = I, R = R, cum.inc = cum.inc))
}
}
library(microbenchmark)
compare <- microbenchmark(rk4(y0, times, SIR, params),
RK4SIR(n, beta, gamma, S0, I0, incidence = TRUE),
RK4SIR.Yang(n, beta, gamma, S0, I0, incidence = TRUE),
times = 10)
# change expr for plot
compare$expr <- gsub("rk4(y0, times, SIR, params)", "rk4",
compare$expr, fixed = TRUE)
compare$expr <- gsub("RK4SIR(n, beta, gamma, S0, I0, incidence = TRUE)", "RK4SIR",
compare$expr, fixed = TRUE)
compare$expr <- gsub("RK4SIR.Yang(n, beta, gamma, S0, I0, incidence = TRUE)",
"RK4SIR.Yang", compare$expr, fixed = TRUE)
compare
p <- autoplot(compare)
p + geom_violin(aes(color = expr, fill = expr)) +
theme(legend.position = "none")
dSdt <- function(t, S, I) {
return(-beta * S * I / N)
}
dIdt <- function(t, S, I) {
return(beta * S * I / N - gamma * I)
}
dRdt <- function(t, I) {
return(gamma * I)
}
RK4SIR <- function(n, beta, gamma, S0, I0, R0 = 0, dt = 1) {
N <<- S0 + I0 + R0  # fixed population
S <- c(S0, rep(0, n))
I <- c(I0, rep(0, n))
R <- c(R0, rep(0, n))
for (i in 1:n) {
Si <- S[i]
Ii <- I[i]
#     Ri <- R[i]
S.k1 <- dSdt(i, Si, Ii)
I.k1 <- dIdt(i, Si, Ii)
#     R.k1 <- dRdt(i, Ii)
S.k2 <- dSdt(i + dt / 2, Si + dt / 2 * S.k1, Ii + dt / 2 * I.k1)
I.k2 <- dIdt(i + dt / 2, Si + dt / 2 * S.k1, Ii + dt / 2 * I.k1)
#     R.k2 <- dRdt(i + dt / 2, Ii + dt / 2 * I.k1)
S.k3 <- dSdt(i + dt / 2, Si + dt / 2 * S.k2, Ii + dt / 2 * I.k2)
I.k3 <- dIdt(i + dt / 2, Si + dt / 2 * S.k2, Ii + dt / 2 * I.k2)
#     R.k3 <- dRdt(i + dt / 2, Ii + dt / 2 * I.k2)
S.k4 <- dSdt(i + dt, Si + dt * S.k3, Ii + dt * I.k3)
I.k4 <- dIdt(i + dt, Si + dt * S.k3, Ii + dt * I.k3)
#     R.k4 <- dRdt(i + dt, Ii + dt * I.k3)
S[i + 1] <- Si + dt / 6 * (S.k1 + 2 * S.k2 + 2 * S.k3 + S.k4)
I[i + 1] <- Ii + dt / 6 * (I.k1 + 2 * I.k2 + 2 * I.k3 + I.k4)
#     R[i + 1] <- Ri + dt / 6 * (R.k1 + 2 * R.k2 + 2 * R.k3 + R.k4)
}
R <- N - S - I
return(data.frame(n = 0:n, S = S, I = I, R = R))
}
S0 <- 7900000
I0 <- 10
# R0 <- 0
# N <- S0 + I0 + R0
beta <- 1 / 2
gamma <- 1 / 3
n <- 200
r <- RK4SIR(n, beta, gamma, S0, I0)
library(reshape2)
r.plot <- melt(r, id = "n", measure = c("S", "I", "R"))
library(ggplot2)
p <- ggplot(r.plot, aes(x = n, y = value, group = variable, color = variable))
p + geom_line() +
ggtitle("Spread of Hong Kong Flu in New York City")
which.max(r$I)
max(r$I)
RK4SIR.Yang <- function(n, beta, gamma, S0, I0, R0 = 0, dt = 1) {
N <<- S0 + I0 + R0  # fixed population
S <- c(S0, rep(0, n))
I <- c(I0, rep(0, n))
R <- c(R0, rep(0, n))
for (i in 1:n) {
Si <- S[i]
Ii <- I[i]
S.k1 <- dSdt(i, Si, Ii)
I.k1 <- dIdt(i, Si, Ii)
Ts1 <- Si + dt / 2 * S.k1
Ti1 <- Ii + dt / 2 * I.k1
S.k2 <- dSdt(i + dt / 2, Ts1, Ti1)
I.k2 <- dIdt(i + dt / 2, Ts1, Ti1)
Ts2 <- Ts1 + dt / 2 * S.k2
Ti2 <- Ti1 + dt / 2 * I.k2
S.k3 <- dSdt(i + dt / 2, Ts2, Ti2)
I.k3 <- dIdt(i + dt / 2, Ts2, Ti2)
Ts3 <- Ts2 + dt * S.k3
Ti3 <- Ti2 + dt * I.k3
S.k4 <- dSdt(i + dt, Ts3, Ti3)
I.k4 <- dIdt(i + dt, Ts3, Ti3)
S[i + 1] <- Si + dt / 6 * (S.k1 + 2 * S.k2 + 2 * S.k3 + S.k4)
I[i + 1] <- Ii + dt / 6 * (I.k1 + 2 * I.k2 + 2 * I.k3 + I.k4)
R[i + 1] <- N - S[i + 1] - I[i + 1]
}
return(data.frame(n = 0:n, S = S, I = I, R = R))
}
r <- RK4SIR.Yang(n, beta, gamma, S0, I0)
r.plot <- melt(r, id = "n", measure = c("S", "I", "R"))
p <- ggplot(r.plot, aes(x = n, y = value, group = variable, color = variable))
p + geom_line() +
ggtitle("Spread of Hong Kong Flu in New York City")
which.max(r$I)
max(r$I)
# initial (state) values for SIR model
y0 <- c(S = S0, I = I0, R = 0)
# vector of time steps
times <- 0:n
# vector of parameters used in SIR model
params <- c(beta = beta, gamma = gamma)
SIR <- function(t, y, params) {
with(as.list(c(params, y)), {
dS <- -beta * S * I / N
dI <- beta * S * I / N - gamma * I
dR <- gamma * I
list(c(dS, dI, dR))
})
}
SIR <- function(t, y, params) {
with(as.list(c(params, y)), {
dS <- -beta * S * I / N
dI <- beta * S * I / N - gamma * I
dR <- gamma * I
list(c(dS, dI, dR))
})
}
library(deSolve)
r <-  rk4(y0, times, SIR, params)
plot(r)
which.max(r[, "I"])
max(r[, "I"])
r <-  ode(y0, times, SIR, params, method = rkMethod("ode45"))
# peak of the infected
which.max(r[, "I"])
max(r[, "I"])
RK4SIR <- function(n, beta, gamma, S0, I0, R0 = 0, dt = 1, incidence = FALSE) {
N <<- S0 + I0 + R0
S <- c(S0, rep(0, n))
I <- c(I0, rep(0, n))
R <- c(R0, rep(0, n))
for (i in 1:n) {
Si <- S[i]
Ii <- I[i]
S.k1 <- dSdt(i, Si, Ii)
I.k1 <- dIdt(i, Si, Ii)
S.k2 <- dSdt(i + dt / 2, Si + dt / 2 * S.k1, Ii + dt / 2 * I.k1)
I.k2 <- dIdt(i + dt / 2, Si + dt / 2 * S.k1, Ii + dt / 2 * I.k1)
S.k3 <- dSdt(i + dt / 2, Si + dt / 2 * S.k2, Ii + dt / 2 * I.k2)
I.k3 <- dIdt(i + dt / 2, Si + dt / 2 * S.k2, Ii + dt / 2 * I.k2)
S.k4 <- dSdt(i + dt, Si + dt * S.k3, Ii + dt * I.k3)
I.k4 <- dIdt(i + dt, Si + dt * S.k3, Ii + dt * I.k3)
S[i + 1] <- Si + dt / 6 * (S.k1 + 2 * S.k2 + 2 * S.k3 + S.k4)
I[i + 1] <- Ii + dt / 6 * (I.k1 + 2 * I.k2 + 2 * I.k3 + I.k4)
}
R <- N - S - I
if (!incidence) {
return(data.frame(n = 0:n, S = S, I = I, R = R))
} else {
# newly infected per day (incidence)
inc = c(I0, -diff(S))
# cumulative incidence
cum.inc = cumsum(inc)
return(data.frame(n = 0:n, S = S, I = I, R = R, inc = inc, cum.inc = cum.inc))
}
}
r <- RK4SIR(n, beta, gamma, S0, I0, incidence = TRUE)
# # plot S, I, R, incidence, cummulative incidence curves
r.plot <- melt(r, id = "n", measure = c("S", "I", "R", "inc", "cum.inc"))
p <- ggplot(r.plot, aes(x = n, y = value, group = variable, color = variable))
p + geom_line() +
scale_colour_discrete(name = "Legend",
breaks = c("S", "I", "R", "inc", "cum.inc"),
labels = c("Susceptible", "Infected ", "Recovered", "Incidence",
"Cummulative incidence")) +
ggtitle("Spread of Hong Kong Flu in New York City")
which.max(r$inc)
max(r$inc)
RK4SIR.Yang <- function(n, beta, gamma, S0, I0, R0 = 0, dt = 1, incidence = FALSE) {
N <<- S0 + I0 + R0
S <- c(S0, rep(0, n))
I <- c(I0, rep(0, n))
R <- c(R0, rep(0, n))
cum.inc <- rep(0, n + 1)  # cumulative incidence
for (i in 1:n) {
Si <- S[i]
Ii <- I[i]
S.k1 <- dSdt(i, Si, Ii)
I.k1 <- dIdt(i, Si, Ii)
CI.k1 <- -S.k1
Ts1 <- Si + dt / 2 * S.k1
Ti1 <- Ii + dt / 2 * I.k1
S.k2 <- dSdt(i + dt / 2, Ts1, Ti1)
I.k2 <- dIdt(i + dt / 2, Ts1, Ti1)
CI.k2 <- -S.k2
Ts2 <- Ts1 + dt / 2 * S.k2
Ti2 <- Ti1 + dt / 2 * I.k2
S.k3 <- dSdt(i + dt / 2, Ts2, Ti2)
I.k3 <- dIdt(i + dt / 2, Ts2, Ti2)
CI.k3 <- -S.k3
Ts3 <- Ts2 + dt * S.k3
Ti3 <- Ti2 + dt * I.k3
S.k4 <- dSdt(i + dt, Ts3, Ti3)
I.k4 <- dIdt(i + dt, Ts3, Ti3)
CI.k4 <- -S.k4
S[i + 1] <- Si + dt / 6 * (S.k1 + 2 * S.k2 + 2 * S.k3 + S.k4)
I[i + 1] <- Ii + dt / 6 * (I.k1 + 2 * I.k2 + 2 * I.k3 + I.k4)
R[i + 1] <- N - S[i + 1] - I[i + 1]
cum.inc[i + 1] <- cum.inc[i] + dt / 6 * (CI.k1 + 2 * CI.k2 + 2 * CI.k3 + CI.k4)
}
if (!incidence) {
return(data.frame(n = 0:n, S = S, I = I, R = R))
} else {
return(data.frame(n = 0:n, S = S, I = I, R = R, cum.inc = cum.inc))
}
}
library(microbenchmark)
compare <- microbenchmark(rk4(y0, times, SIR, params),
RK4SIR(n, beta, gamma, S0, I0, incidence = TRUE),
RK4SIR.Yang(n, beta, gamma, S0, I0, incidence = TRUE),
times = 10)
# change expr for plot
compare$expr <- gsub("rk4(y0, times, SIR, params)", "rk4",
compare$expr, fixed = TRUE)
compare$expr <- gsub("RK4SIR(n, beta, gamma, S0, I0, incidence = TRUE)", "RK4SIR",
compare$expr, fixed = TRUE)
compare$expr <- gsub("RK4SIR.Yang(n, beta, gamma, S0, I0, incidence = TRUE)",
"RK4SIR.Yang", compare$expr, fixed = TRUE)
compare
p <- autoplot(compare)
p + geom_violin(aes(color = expr, fill = expr)) +
theme(legend.position = "none")
dSdt <- function(t, S, I) {
return(-beta * S * I / N)
}
dIdt <- function(t, S, I) {
return(beta * S * I / N - gamma * I)
}
dRdt <- function(t, I) {
return(gamma * I)
}
RK4SIR <- function(n, beta, gamma, S0, I0, R0 = 0, dt = 1) {
N <<- S0 + I0 + R0  # fixed population
S <- c(S0, rep(0, n))
I <- c(I0, rep(0, n))
R <- c(R0, rep(0, n))
for (i in 1:n) {
Si <- S[i]
Ii <- I[i]
#     Ri <- R[i]
S.k1 <- dSdt(i, Si, Ii)
I.k1 <- dIdt(i, Si, Ii)
#     R.k1 <- dRdt(i, Ii)
S.k2 <- dSdt(i + dt / 2, Si + dt / 2 * S.k1, Ii + dt / 2 * I.k1)
I.k2 <- dIdt(i + dt / 2, Si + dt / 2 * S.k1, Ii + dt / 2 * I.k1)
#     R.k2 <- dRdt(i + dt / 2, Ii + dt / 2 * I.k1)
S.k3 <- dSdt(i + dt / 2, Si + dt / 2 * S.k2, Ii + dt / 2 * I.k2)
I.k3 <- dIdt(i + dt / 2, Si + dt / 2 * S.k2, Ii + dt / 2 * I.k2)
#     R.k3 <- dRdt(i + dt / 2, Ii + dt / 2 * I.k2)
S.k4 <- dSdt(i + dt, Si + dt * S.k3, Ii + dt * I.k3)
I.k4 <- dIdt(i + dt, Si + dt * S.k3, Ii + dt * I.k3)
#     R.k4 <- dRdt(i + dt, Ii + dt * I.k3)
S[i + 1] <- Si + dt / 6 * (S.k1 + 2 * S.k2 + 2 * S.k3 + S.k4)
I[i + 1] <- Ii + dt / 6 * (I.k1 + 2 * I.k2 + 2 * I.k3 + I.k4)
#     R[i + 1] <- Ri + dt / 6 * (R.k1 + 2 * R.k2 + 2 * R.k3 + R.k4)
}
R <- N - S - I
return(data.frame(n = 0:n, S = S, I = I, R = R))
}
#
S0 <- 559034500 #the cumulative susceptible population of England (without reproduction), 1944 - 1994
I0 <- 1581699 #the average number of people infected on day 0, (from all regions, without births)
# R0 <- 0
# N <- S0 + I0 + R0
beta <- 1 / 2
gamma <- 1 / 3
n <- 300
r <- RK4SIR(n, beta, gamma, S0, I0)
library(reshape2)
r.plot <- melt(r, id = "n", measure = c("S", "I", "R"))
library(ggplot2)
p <- ggplot(r.plot, aes(x = n, y = value, group = variable, color = variable))
p + geom_line() +
ggtitle("Measles Epidemic in England, Without reproduction (1944 -1994)")
which.max(r$I)
max(r$I)
RK4SIR.Yang <- function(n, beta, gamma, S0, I0, R0 = 0, dt = 1) {
N <<- S0 + I0 + R0  # fixed population
S <- c(S0, rep(0, n))
I <- c(I0, rep(0, n))
R <- c(R0, rep(0, n))
for (i in 1:n) {
Si <- S[i]
Ii <- I[i]
S.k1 <- dSdt(i, Si, Ii)
I.k1 <- dIdt(i, Si, Ii)
Ts1 <- Si + dt / 2 * S.k1
Ti1 <- Ii + dt / 2 * I.k1
S.k2 <- dSdt(i + dt / 2, Ts1, Ti1)
I.k2 <- dIdt(i + dt / 2, Ts1, Ti1)
Ts2 <- Ts1 + dt / 2 * S.k2
Ti2 <- Ti1 + dt / 2 * I.k2
S.k3 <- dSdt(i + dt / 2, Ts2, Ti2)
I.k3 <- dIdt(i + dt / 2, Ts2, Ti2)
Ts3 <- Ts2 + dt * S.k3
Ti3 <- Ti2 + dt * I.k3
S.k4 <- dSdt(i + dt, Ts3, Ti3)
I.k4 <- dIdt(i + dt, Ts3, Ti3)
S[i + 1] <- Si + dt / 6 * (S.k1 + 2 * S.k2 + 2 * S.k3 + S.k4)
I[i + 1] <- Ii + dt / 6 * (I.k1 + 2 * I.k2 + 2 * I.k3 + I.k4)
R[i + 1] <- N - S[i + 1] - I[i + 1]
}
return(data.frame(n = 0:n, S = S, I = I, R = R))
}
r <- RK4SIR.Yang(n, beta, gamma, S0, I0)
r.plot <- melt(r, id = "n", measure = c("S", "I", "R"))
p <- ggplot(r.plot, aes(x = n, y = value, group = variable, color = variable))
p + geom_line() +
ggtitle("Measles Pandemic in England, without reproduction (1944 - 1994)")
which.max(r$I)
max(r$I)
# initial (state) values for SIR model
y0 <- c(S = S0, I = I0, R = 0)
# vector of time steps
times <- 0:n
# vector of parameters used in SIR model
params <- c(beta = beta, gamma = gamma)
SIR <- function(t, y, params) {
with(as.list(c(params, y)), {
dS <- -beta * S * I / N
dI <- beta * S * I / N - gamma * I
dR <- gamma * I
list(c(dS, dI, dR))
})
}
library(deSolve)
r <-  rk4(y0, times, SIR, params)
plot(r)
which.max(r[, "I"])
max(r[, "I"])
r <-  ode(y0, times, SIR, params, method = rkMethod("ode45"))
# peak of the infected
which.max(r[, "I"])
max(r[, "I"])
RK4SIR <- function(n, beta, gamma, S0, I0, R0 = 0, dt = 1, incidence = FALSE) {
N <<- S0 + I0 + R0
S <- c(S0, rep(0, n))
I <- c(I0, rep(0, n))
R <- c(R0, rep(0, n))
for (i in 1:n) {
Si <- S[i]
Ii <- I[i]
S.k1 <- dSdt(i, Si, Ii)
I.k1 <- dIdt(i, Si, Ii)
S.k2 <- dSdt(i + dt / 2, Si + dt / 2 * S.k1, Ii + dt / 2 * I.k1)
I.k2 <- dIdt(i + dt / 2, Si + dt / 2 * S.k1, Ii + dt / 2 * I.k1)
S.k3 <- dSdt(i + dt / 2, Si + dt / 2 * S.k2, Ii + dt / 2 * I.k2)
I.k3 <- dIdt(i + dt / 2, Si + dt / 2 * S.k2, Ii + dt / 2 * I.k2)
S.k4 <- dSdt(i + dt, Si + dt * S.k3, Ii + dt * I.k3)
I.k4 <- dIdt(i + dt, Si + dt * S.k3, Ii + dt * I.k3)
S[i + 1] <- Si + dt / 6 * (S.k1 + 2 * S.k2 + 2 * S.k3 + S.k4)
I[i + 1] <- Ii + dt / 6 * (I.k1 + 2 * I.k2 + 2 * I.k3 + I.k4)
}
R <- N - S - I
if (!incidence) {
return(data.frame(n = 0:n, S = S, I = I, R = R))
} else {
# newly infected per day (incidence)
inc = c(I0, -diff(S))
# cumulative incidence
cum.inc = cumsum(inc)
return(data.frame(n = 0:n, S = S, I = I, R = R, inc = inc, cum.inc = cum.inc))
}
}
r <- RK4SIR(n, beta, gamma, S0, I0, incidence = TRUE)
# # plot S, I, R, incidence, cummulative incidence curves
r.plot <- melt(r, id = "n", measure = c("S", "I", "R", "inc", "cum.inc"))
p <- ggplot(r.plot, aes(x = n, y = value, group = variable, color = variable))
p + geom_line() +
scale_colour_discrete(name = "Legend",
breaks = c("S", "I", "R", "inc", "cum.inc"),
labels = c("Susceptible", "Infected ", "Recovered", "Incidence",
"Cummulative incidence")) +
ggtitle("Measles Pandemic in England, without reproduction, 1944 - 1994")
which.max(r$inc)
max(r$inc)
RK4SIR.Yang <- function(n, beta, gamma, S0, I0, R0 = 0, dt = 1, incidence = FALSE) {
N <<- S0 + I0 + R0
S <- c(S0, rep(0, n))
I <- c(I0, rep(0, n))
R <- c(R0, rep(0, n))
cum.inc <- rep(0, n + 1)  # cumulative incidence
for (i in 1:n) {
Si <- S[i]
Ii <- I[i]
S.k1 <- dSdt(i, Si, Ii)
I.k1 <- dIdt(i, Si, Ii)
CI.k1 <- -S.k1
Ts1 <- Si + dt / 2 * S.k1
Ti1 <- Ii + dt / 2 * I.k1
S.k2 <- dSdt(i + dt / 2, Ts1, Ti1)
I.k2 <- dIdt(i + dt / 2, Ts1, Ti1)
CI.k2 <- -S.k2
Ts2 <- Ts1 + dt / 2 * S.k2
Ti2 <- Ti1 + dt / 2 * I.k2
S.k3 <- dSdt(i + dt / 2, Ts2, Ti2)
I.k3 <- dIdt(i + dt / 2, Ts2, Ti2)
CI.k3 <- -S.k3
Ts3 <- Ts2 + dt * S.k3
Ti3 <- Ti2 + dt * I.k3
S.k4 <- dSdt(i + dt, Ts3, Ti3)
I.k4 <- dIdt(i + dt, Ts3, Ti3)
CI.k4 <- -S.k4
S[i + 1] <- Si + dt / 6 * (S.k1 + 2 * S.k2 + 2 * S.k3 + S.k4)
I[i + 1] <- Ii + dt / 6 * (I.k1 + 2 * I.k2 + 2 * I.k3 + I.k4)
R[i + 1] <- N - S[i + 1] - I[i + 1]
cum.inc[i + 1] <- cum.inc[i] + dt / 6 * (CI.k1 + 2 * CI.k2 + 2 * CI.k3 + CI.k4)
}
if (!incidence) {
return(data.frame(n = 0:n, S = S, I = I, R = R))
} else {
return(data.frame(n = 0:n, S = S, I = I, R = R, cum.inc = cum.inc))
}
}
library(microbenchmark)
compare <- microbenchmark(rk4(y0, times, SIR, params),
RK4SIR(n, beta, gamma, S0, I0, incidence = TRUE),
RK4SIR.Yang(n, beta, gamma, S0, I0, incidence = TRUE),
times = 10)
# change expr for plot
compare$expr <- gsub("rk4(y0, times, SIR, params)", "rk4",
compare$expr, fixed = TRUE)
compare$expr <- gsub("RK4SIR(n, beta, gamma, S0, I0, incidence = TRUE)", "RK4SIR",
compare$expr, fixed = TRUE)
compare$expr <- gsub("RK4SIR.Yang(n, beta, gamma, S0, I0, incidence = TRUE)",
"RK4SIR.Yang", compare$expr, fixed = TRUE)
compare
p <- autoplot(compare)
p + geom_violin(aes(color = expr, fill = expr)) +
theme(legend.position = "none")
git
